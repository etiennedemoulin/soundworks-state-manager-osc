"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _keyv = _interopRequireDefault(require("keyv"));

var _keyvFile = _interopRequireDefault(require("keyv-file"));

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Simple in file key / value database.
 * Do not expose for now, may not be the right way to go...
 *
 * @todo - implement options to change storage solution.
 * cf. https://github.com/lukechilds/keyv
 *
 * @memberof server
 * @private
 */
class Db {
  constructor(options = {}) {
    const dbDirectory = _path.default.join(process.cwd(), '.data');

    if (!_fs.default.existsSync(dbDirectory)) {
      _fs.default.mkdirSync(dbDirectory);
    }

    const filename = _path.default.join(dbDirectory, 'soundworks.db');

    this.keyv = new _keyv.default({
      namespace: 'soundworks',
      store: new _keyvFile.default({
        filename
      })
    });
    this.keyv.on('error', err => console.log('Connection Error', err));
  }

  async get(key) {
    const value = await this.keyv.get(key);
    return value;
  }

  async set(key, value, expireDelayMs = undefined) {
    await this.keyv.set(key, value, expireDelayMs);
  }

  async delete(key) {
    await this.keyv.delete(key);
  }

  async clear() {
    await this.keyv.clear();
  }

}

var _default = Db;
exports.default = _default;